import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { format, parseISO } from 'date-fns';

/**
 * Generate a PDF for an itinerary
 * @param {Object} itinerary - Itinerary data
 * @returns {Promise<Blob>} - PDF blob
 */
export const generateItineraryPDF = async (itinerary) => {
  // Create a new PDF document
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4'
  });

  // Set title
  doc.setFontSize(20);
  doc.setTextColor(33, 33, 33);
  doc.text(`Trip to ${itinerary.destination.name}, ${itinerary.destination.country}`, 15, 20);

  // Set dates
  doc.setFontSize(12);
  doc.setTextColor(100, 100, 100);
  const startDate = format(parseISO(itinerary.startDate), 'MMM d, yyyy');
  const endDate = format(parseISO(itinerary.endDate), 'MMM d, yyyy');
  doc.text(`${startDate} - ${endDate}`, 15, 28);

  // Add logo
  doc.setFontSize(10);
  doc.setTextColor(80, 80, 80);
  doc.text('Generated by Ghoomo', 150, 20);

  // Add divider
  doc.setDrawColor(220, 220, 220);
  doc.line(15, 32, 195, 32);

  // Add itinerary days
  let yPosition = 40;

  for (const day of itinerary.dailyItineraries) {
    // Check if we need a new page
    if (yPosition > 250) {
      doc.addPage();
      yPosition = 20;
    }

    // Add day header
    doc.setFontSize(16);
    doc.setTextColor(33, 33, 33);
    const dayDate = format(parseISO(day.date), 'EEEE, MMMM d');
    doc.text(`Day ${day.day}: ${dayDate}`, 15, yPosition);
    yPosition += 8;

    // Add weather info if available
    if (day.weather) {
      doc.setFontSize(10);
      doc.setTextColor(100, 100, 100);
      doc.text(`Weather: ${day.weather.weatherDescription}, ${Math.round(day.weather.minTemp)}°C - ${Math.round(day.weather.maxTemp)}°C`, 15, yPosition);
      yPosition += 6;
    }

    // Add activities table
    const tableData = day.timeSlots.map(slot => [
      `${slot.startTime} - ${slot.endTime}`,
      slot.activity.name,
      slot.activity.description || '',
      `₹${slot.activity.estimatedCost}`
    ]);

    doc.autoTable({
      startY: yPosition,
      head: [['Time', 'Activity', 'Description', 'Cost']],
      body: tableData,
      theme: 'striped',
      headStyles: {
        fillColor: [59, 130, 246],
        textColor: [255, 255, 255],
        fontStyle: 'bold'
      },
      columnStyles: {
        0: { cellWidth: 30 },
        1: { cellWidth: 40 },
        2: { cellWidth: 80 },
        3: { cellWidth: 25 }
      },
      margin: { left: 15, right: 15 }
    });

    yPosition = doc.lastAutoTable.finalY + 15;

    // Add daily cost summary
    doc.setFontSize(12);
    doc.setTextColor(33, 33, 33);
    doc.text(`Daily Budget: ₹${day.dailyCost.total}`, 15, yPosition);
    yPosition += 6;

    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text(`Accommodation: ₹${day.dailyCost.accommodation}`, 20, yPosition);
    yPosition += 5;
    doc.text(`Activities: ₹${day.dailyCost.activities}`, 20, yPosition);
    yPosition += 5;
    doc.text(`Meals: ₹${day.dailyCost.meals}`, 20, yPosition);
    yPosition += 5;
    doc.text(`Transport: ₹${day.dailyCost.transport}`, 20, yPosition);
    yPosition += 15;
  }

  // Add transport recommendations
  if (itinerary.transportBudget) {
    // Check if we need a new page
    if (yPosition > 240) {
      doc.addPage();
      yPosition = 20;
    }

    doc.setFontSize(16);
    doc.setTextColor(33, 33, 33);
    doc.text('Recommended Transport Options', 15, yPosition);
    yPosition += 8;

    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    
    for (const transport of itinerary.transportBudget.recommendedTransport) {
      const transportCost = itinerary.transportBudget.transportCosts.find(t => t.type === transport);
      doc.text(`• ${transport.charAt(0).toUpperCase() + transport.slice(1)}: ₹${transportCost?.avgTripCost || 0} per trip`, 20, yPosition);
      yPosition += 5;
    }
    
    yPosition += 5;
    doc.text(`Daily transport budget: ₹${itinerary.transportBudget.dailyBudget}`, 20, yPosition);
  }

  // Add footer
  const pageCount = doc.internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(10);
    doc.setTextColor(150, 150, 150);
    doc.text(
      `Page ${i} of ${pageCount} | Generated on ${format(new Date(), 'MMM d, yyyy')}`,
      doc.internal.pageSize.getWidth() / 2,
      doc.internal.pageSize.getHeight() - 10,
      { align: 'center' }
    );
  }

  return doc.output('blob');
};

/**
 * Download itinerary as PDF
 * @param {Object} itinerary - Itinerary data
 */
export const downloadItineraryPDF = async (itinerary) => {
  try {
    const pdfBlob = await generateItineraryPDF(itinerary);
    
    // Create a download link
    const url = URL.createObjectURL(pdfBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `Ghoomo_Itinerary_${itinerary.destination.name}.pdf`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
};